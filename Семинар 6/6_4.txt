#include <iostream>
#include <unordered_map>

class TrieNode {
public:
    std::unordered_map<char, TrieNode*> children;
    bool isEndOfWord;

    TrieNode() : isEndOfWord(false) {}
};

class Trie {
private:
    TrieNode* root;

    void insert(TrieNode* node, const std::string& word, int index) {
        if (index == word.length()) {
            node->isEndOfWord = true;
            return;
        }

        char ch = word[index];
        if (node->children.find(ch) == node->children.end()) {
            node->children[ch] = new TrieNode();
        }

        insert(node->children[ch], word, index + 1);
    }

    bool search(TrieNode* node, const std::string& word, int index) {
        if (index == word.length()) {
            return node->isEndOfWord;
        }

        char ch = word[index];
        if (node->children.find(ch) == node->children.end()) {
            return false;
        }

        return search(node->children[ch], word, index + 1);
    }

public:
    Trie() : root(new TrieNode()) {}

    void insert(const std::string& word) {
        insert(root, word, 0);
    }

    bool search(const std::string& word) {
        return search(root, word, 0);
    }
};

int main() {
    Trie trie;

    trie.insert("apple");
    trie.insert("app");
    trie.insert("banana");

    std::cout << (trie.search("app") ? "Found" : "Not Found") << std::endl;
    std::cout << (trie.search("orange") ? "Found" : "Not Found") << std::endl;

    return 0;
}