#include <stdio.h>

// Проверка совместимости двух матриц для сложения и вычитания
int CompatibleMatr(int rows1, int cols1, int rows2, int cols2) {
    return (rows1 == rows2 && cols1 == cols2);
}

// Сложение двух матриц
void Matr(int A[][100], int B[][100], int C[][100], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

// Вычитание двух матриц
void subtractMatr(int A[][100], int B[][100], int C[][100], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

// Умножение матрицы на число
void multiplyMatrScalar(int matrix[][100], int rows, int cols, int scalar) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] *= scalar;
        }
    }
}

// Умножение двух матриц
void multiplyMatr(int A[][100], int B[][100], int C[][100], int rows1, int cols1, int cols2) {
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            C[i][j] = 0;
            for (int k = 0; k < cols1; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Вычисление транспонированной матрицы
void transposeMatr(int matrix[][100], int rows, int cols, int result[][100]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[j][i] = matrix[i][j];
        }
    }
}

// Проверка равенства двух матриц
int MatrEqual(int A[][100], int B[][100], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (A[i][j] != B[i][j]) {
                return 0; // Матрицы не равны
            }
        }
    }
    return 1; // Матрицы равны
}

int main() {
    int A[100][100], B[100][100], C[100][100];
    int rows1, cols1, rows2, cols2;

    // Ввод размеров и элементов матриц A и B

    printf("Введите размеры матрицы A (строки и столбцы): ");
    scanf("%d %d", &rows1, &cols1);

    printf("Введите элементы матрицы A:\n");
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols1; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    printf("Введите размеры матрицы B (строки и столбцы): ");
    scanf("%d %d", &rows2, &cols2);

    printf("Введите элементы матрицы B:\n");
    for (int i = 0; i < rows2; i++) {
        for (int j = 0; j < cols2; j++) {
            scanf("%d", &B[i][j]);
        }
    }

    // Совместимость операций
    if (rows1 != rows2 || cols1 != cols2) {
        printf("Операции сложения и вычитания невозможны из-за разных размеров матриц.\n");
    } else {
        // Вызов функций для сложения и вычитания матриц
        Matr(A, B, C, rows1, cols1);
        subtractMatr(A, B, C, rows1, cols1);

        // Вывод результата сложения и вычитания
        printf("Результат сложения матриц A и B:\n");
        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < cols1; j++) {
                printf("%d ", C[i][j]);
            }
            printf("\n");
        }

        printf("Результат вычитания матриц B из A:\n");
        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < cols1; j++) {
                printf("%d ", C[i][j]);
            }
            printf("\n");
        }
    }

    // Ввод числа для умножения матрицы A
    int scalar;
    printf("Введите число для умножения матрицы A: ");
    scanf("%d", &scalar);

    // Вызов функции для умножения матрицы на число
    multiplyMatrScalar(A, rows1, cols1, scalar);

    // Результат умножения
    printf("Результат умножения матрицы A на число %d:\n", scalar);
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols1; j++) {
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }

    // Проверка совместимости операции умножения матриц
    if (cols1 != rows2) {
        printf("Операция умножения матриц невозможна из-за несовпадения размеров.\n");
    } else {
        // Вызов функции для умножения матриц
        multiplyMatr(A, B, C, rows1, cols1, cols2);

        // Вывод результата умножения матриц
        printf("Результат умножения матрицы A на B:\n");
        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < cols2; j++) {
                printf("%d ", C[i][j]);
            }
            printf("\n");
        }
    }

    // Вызов функции для вычисления транспонированной матрицы
    int transposeResult[100][100];
    transposeMatr(A, rows1, cols1, transposeResult);

    // Вывод транспонированной матрицы
    printf("Транспонированная матрицы A:\n");
    for (int i = 0; i < cols1; i++) {
        for (int j = 0; j < rows1; j++) {
            printf("%d ", transposeResult[i][j]);
        }
        printf("\n");
    }

    // Проверка равенства матриц A и B
    if (MatrEqual(A, B, rows1, cols1)) {
        printf("Матрицы A и B равны.\n");
    } else {
        printf("Матрицы A и B не равны.\n");
    }

    return 0;
}