#include <iostream>

const int MAX_SIZE = 5; 

class CircularQueue {
private:
    int front;
    int rear;
    int size;
    int* array;

public:
    CircularQueue() : front(-1), rear(-1), size(0), array(new int[MAX_SIZE]) {}

    ~CircularQueue() {
        delete[] array;
    }

    bool isEmpty() const {
        return size == 0;
    }

    bool isFull() const {
        return size == MAX_SIZE;
    }

    void enqueue(int data) {
        if (isFull()) {
            std::cout << "Queue is full. Cannot enqueue." << std::endl;
            return;
        }

        rear = (rear + 1) % MAX_SIZE;
        array[rear] = data;

        if (front == -1) {
            front = rear;
        }

        size++;
    }

    int dequeue() {
        if (isEmpty()) {
            std::cout << "Queue is empty. Cannot dequeue." << std::endl;
            return -1; 
        }

        int data = array[front];
        front = (front + 1) % MAX_SIZE;
        size--;

        if (size == 0) {
          front = rear = -1;
        }

        return data;
    }

    int peek() const {
        if (isEmpty()) {
            std::cout << "Queue is empty. Cannot peek." << std::endl;
            return -1;
        }

        return array[front];
    }
};

int main() {
    CircularQueue cq;

    cq.enqueue(10);
    cq.enqueue(20);
    cq.enqueue(30);

    std::cout << "Front element: " << cq.peek() << std::endl;

    std::cout << "Dequeued: " << cq.dequeue() << std::endl;
    std::cout << "Dequeued: " << cq.dequeue() << std::endl;

    std::cout << "Is queue empty? " << (cq.isEmpty() ? "Yes" : "No") << std::endl;

    cq.enqueue(40);
    cq.enqueue(50);

    std::cout << "Front element: " << cq.peek() << std::endl;

    return 0;
}